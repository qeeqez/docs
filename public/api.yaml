basePath: /
definitions:
  File:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      format:
        example: avif
        type: string
      id:
        example: file123456789
        type: string
      name:
        example: my-image.jpg
        type: string
      project_id:
        example: proj123456789
        type: string
      size:
        example: 1048576
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/github_com_qeeqez_api_db_sqlc.FileStatus'
        example: ready
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      url:
        example: https://cdn.example.com/images/file123456789.avif
        type: string
    type: object
  Image:
    properties:
      attached_to_video:
        example: false
        type: boolean
      file:
        $ref: '#/definitions/File'
      height:
        example: 1080
        type: integer
      id:
        example: img123456789
        type: string
      thumbhash:
        example: 1QcSHQRnh493V4dIh4eXh1h4kJUI
        type: string
      width:
        example: 1920
        type: integer
    type: object
  Post:
    properties:
      created_at:
        type: string
      creator_id:
        type: string
      description:
        type: string
      feed_id:
        type: string
      id:
        type: string
      image:
        $ref: '#/definitions/Image'
      type:
        $ref: '#/definitions/github_com_qeeqez_api_db_sqlc.PostType'
      updated_at:
        type: string
      video:
        $ref: '#/definitions/Video'
    type: object
  ResponseError:
    properties:
      code:
        description: HTTP status code
        example: 400
        type: integer
      details:
        description: Optional details about the error
        example: The provided ID is not valid
        type: string
      error:
        description: Error message describing what went wrong
        example: Invalid request
        type: string
    type: object
  Video:
    properties:
      bitrate:
        type: integer
      codec:
        type: string
      duration:
        type: number
      file:
        $ref: '#/definitions/File'
      framerate:
        type: string
      hdr:
        type: boolean
      height:
        type: integer
      id:
        type: string
      poster:
        $ref: '#/definitions/Image'
      width:
        type: integer
    type: object
  github_com_qeeqez_api_db_sqlc.FileStatus:
    enum:
    - uploading
    - uploaded
    - processing
    - ready
    - error
    type: string
    x-enum-varnames:
    - FileStatusUploading
    - FileStatusUploaded
    - FileStatusProcessing
    - FileStatusReady
    - FileStatusError
  github_com_qeeqez_api_db_sqlc.PostType:
    enum:
    - image
    - video
    type: string
    x-enum-varnames:
    - PostTypeImage
    - PostTypeVideo
  github_com_qeeqez_api_db_sqlc.VideoQuality:
    enum:
    - basic
    - shorts
    - pro
    type: string
    x-enum-varnames:
    - VideoQualityBasic
    - VideoQualityShorts
    - VideoQualityPro
  internal_images.UploadCompleteRequest:
    properties:
      attached_to_video:
        example: false
        type: boolean
      image_id:
        example: img123456789
        type: string
    type: object
  internal_images.UploadInitRequest:
    properties:
      format:
        example: jpg
        type: string
      name:
        example: my-image.jpg
        type: string
    type: object
  internal_images.UploadInitResponse:
    properties:
      image_id:
        example: img123456789
        type: string
      presigned_url:
        example: https://s3.amazonaws.com/bucket/path?signature=...
        type: string
      upload_expires:
        example: 1640995200
        type: integer
    type: object
  internal_posts.PostUploadCompleteRequest:
    properties:
      post_id:
        type: string
    required:
    - post_id
    type: object
  internal_posts.PostUploadInitRequest:
    properties:
      content_type:
        enum:
        - image
        - video
        type: string
      creator_id:
        type: string
      description:
        type: string
      file_name:
        type: string
      format:
        type: string
      image_format:
        type: string
      video_quality:
        allOf:
        - $ref: '#/definitions/github_com_qeeqez_api_db_sqlc.VideoQuality'
        enum:
        - basic
        - shorts
        - pro
    required:
    - content_type
    - file_name
    - format
    type: object
  internal_posts.PostUploadInitResponse:
    properties:
      content_id:
        type: string
      content_presigned_url:
        type: string
      post_id:
        type: string
      poster_id:
        type: string
      poster_presigned_url:
        type: string
      upload_expires:
        type: integer
    type: object
  internal_videos.UploadCompleteRequest:
    properties:
      video_id:
        type: string
    type: object
  internal_videos.UploadInitRequest:
    properties:
      file_name:
        type: string
      image_format:
        type: string
      video_quality:
        allOf:
        - $ref: '#/definitions/github_com_qeeqez_api_db_sqlc.VideoQuality'
        enum:
        - basic
        - shorts
        - pro
    type: object
  internal_videos.UploadInitResponse:
    properties:
      poster_id:
        type: string
      poster_presigned_url:
        type: string
      upload_expires:
        type: integer
      video_id:
        type: string
      video_presigned_url:
        type: string
    type: object
  pagination.PaginatedResponse-Image:
    properties:
      data:
        description: Data contains the slice of items for the current request.
        items:
          $ref: '#/definitions/Image'
        type: array
      pagination:
        allOf:
        - $ref: '#/definitions/pagination.Pagination'
        description: Pagination data for the request.
    type: object
  pagination.PaginatedResponse-Post:
    properties:
      data:
        description: Data contains the slice of items for the current request.
        items:
          $ref: '#/definitions/Post'
        type: array
      pagination:
        allOf:
        - $ref: '#/definitions/pagination.Pagination'
        description: Pagination data for the request.
    type: object
  pagination.PaginatedResponse-Video:
    properties:
      data:
        description: Data contains the slice of items for the current request.
        items:
          $ref: '#/definitions/Video'
        type: array
      pagination:
        allOf:
        - $ref: '#/definitions/pagination.Pagination'
        description: Pagination data for the request.
    type: object
  pagination.Pagination:
    properties:
      limit:
        default: 25
        description: Maximum number of items to return in a single request.
        example: 100
        maximum: 100
        minimum: 1
        type: integer
      offset:
        default: 0
        description: Starting point of the result set.
        example: 50
        minimum: 0
        type: integer
      total:
        description: The total number of available items in the full list.
        example: 1000
        minimum: 0
        type: integer
    type: object
info:
  contact:
    email: support@rixl.com
    name: RIXL Support
    url: https://rixl.com/support
  description: |-
    **Build a powerful video experience from on-demand streaming to dynamic social feeds with a single API.**

    RIXL handles video processing, ingestion and global delivery so you don't have to.
    With builtin support for transcoding, storage and structured media feeds, Our API makes it easy to deliver high-quality media content at scale.
  license:
    name: All Rights Reserved
    url: https://rixl.com/terms-of-service
  title: RIXL API
  version: "2.0"
paths:
  /feeds/{feedId}:
    get:
      description: Retrieve posts in a feed, with pagination.
      parameters:
      - description: Feed ID
        in: path
        name: feedId
        required: true
        type: string
      - default: 25
        description: Maximum number of items to return in a single request. <br> **Default:**
          `25`
        example: 25
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: Starting point of the result set. <br>To get page 2 with a limit
          of 25, set `offset` to `25`. <br> **Default:** `0`
        example: 0
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pagination.PaginatedResponse-Post'
        "400":
          description: Invalid feed ID or query parameters
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List posts in a feed
      tags:
      - Feeds
  /feeds/{feedId}/{postId}:
    get:
      description: Retrieve a post from feed by its ID
      parameters:
      - description: Feed ID
        in: path
        name: feedId
        required: true
        type: string
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get a post
      tags:
      - Feeds
  /feeds/{feedId}/creators/{creatorId}:
    get:
      description: Retrieve posts in a feed by a specific creator, with pagination.
      parameters:
      - description: Feed ID
        in: path
        name: feedId
        required: true
        type: string
      - description: Creator ID
        in: path
        name: creatorId
        required: true
        type: string
      - default: 25
        description: Maximum number of items to return in a single request. <br> **Default:**
          `25`
        example: 25
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: Starting point of the result set. <br>To get page 2 with a limit
          of 25, set `offset` to `25`. <br> **Default:** `0`
        example: 0
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pagination.PaginatedResponse-Post'
        "400":
          description: Invalid feed ID, creator ID, or query parameters
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List posts by creator
      tags:
      - Feeds
  /feeds/{feedId}/upload/complete:
    post:
      consumes:
      - application/json
      description: Mark a post upload as complete after successful file upload using
        API key authentication
      parameters:
      - description: Post upload completion request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_posts.PostUploadCompleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Post'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized - Invalid API key
          schema:
            $ref: '#/definitions/ResponseError'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Failed to complete upload
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Complete post upload
      tags:
      - Feeds
  /feeds/{feedId}/upload/init:
    post:
      consumes:
      - application/json
      description: Initialize post creation and get presigned URLs for content upload
        using API key authentication
      parameters:
      - description: Post upload initialization request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_posts.PostUploadInitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_posts.PostUploadInitResponse'
        "400":
          description: Invalid request body or parameters
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized - Invalid API key
          schema:
            $ref: '#/definitions/ResponseError'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: Feed not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Failed to initialize upload
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Initialize post creation with upload
      tags:
      - Feeds
  /images:
    get:
      description: Retrieve all images for a specific project, with pagination and
        sorting.
      parameters:
      - default: 25
        description: Maximum number of items to return in a single request. <br> **Default:**
          `25`
        example: 25
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: Starting point of the result set. <br>To get page 2 with a limit
          of 25, set `offset` to `25`. <br> **Default:** `0`
        example: 0
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Field to sort by (created_at, name, size, updated_at)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pagination.PaginatedResponse-Image'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: List images for a project
      tags:
      - Images
  /images/{imageId}:
    get:
      description: Retrieve an image by its ID for a specific project.
      parameters:
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Image'
        "400":
          description: Invalid image ID
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: Image not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get image
      tags:
      - Images
  /images/upload/complete:
    post:
      consumes:
      - application/json
      description: Complete the upload process and create the image record using API
        key authentication
      parameters:
      - description: Upload completion request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_images.UploadCompleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Image'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized - Invalid API key
          schema:
            $ref: '#/definitions/ResponseError'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Failed to complete upload or create image
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Complete image upload
      tags:
      - Images
  /images/upload/init:
    post:
      consumes:
      - application/json
      description: Initialize a presigned URL upload for an image file using API key
        authentication
      parameters:
      - description: Upload initialization request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_images.UploadInitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_images.UploadInitResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized - Invalid API key
          schema:
            $ref: '#/definitions/ResponseError'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Failed to initialize upload
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Initialize image upload
      tags:
      - Images
  /videos:
    get:
      description: Retrieve all videos for a specific project, with pagination and
        sorting.
      parameters:
      - default: 25
        description: Maximum number of items to return in a single request. <br> **Default:**
          `25`
        example: 25
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: Starting point of the result set. <br>To get page 2 with a limit
          of 25, set `offset` to `25`. <br> **Default:** `0`
        example: 0
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Field to sort by (created_at, name, size, updated_at, duration)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pagination.PaginatedResponse-Video'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: List videos for a project
      tags:
      - Videos
  /videos/{videoId}:
    get:
      description: Retrieve a video by its ID for a specific project.
      parameters:
      - description: Video ID
        in: path
        name: videoId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Video'
        "400":
          description: Invalid video ID
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: Video not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get video
      tags:
      - Videos
  /videos/upload/complete:
    post:
      consumes:
      - application/json
      description: Mark a video upload as complete after successful upload to storage
        using API key authentication
      parameters:
      - description: Video upload completion request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_videos.UploadCompleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Video'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized - Invalid API key
          schema:
            $ref: '#/definitions/ResponseError'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Failed to complete upload
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Complete video upload
      tags:
      - Videos
  /videos/upload/init:
    post:
      consumes:
      - application/json
      description: Initialize a video upload and get presigned URLs for video and
        poster using API key authentication
      parameters:
      - description: Video upload initialization request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_videos.UploadInitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_videos.UploadInitResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized - Invalid API key
          schema:
            $ref: '#/definitions/ResponseError'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Failed to initialize upload
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Initialize video upload
      tags:
      - Videos
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    description: Internal API key for service-to-service communication.
    in: header
    name: X-API-Key
    type: apiKey
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: '**Build dynamic social experiences.**<br><br>Feeds are ordered collections
    of Posts, designed for creating vertical video carousels, stories, or social timelines.
    Each Post contains your media (video or image) and its associated metadata.'
  name: Feeds
- description: '**Upload once, stream perfectly anywhere.**<br><br>RIXL''s intelligent
    processing pipeline analyzes your video and transcodes it for optimal quality
    and performance. We handle the complexity so you can deliver a perfect playback
    experience every time.'
  name: Videos
- description: '**Deliver fast, perfectly formatted images.**<br><br>RIXL automatically
    handles image optimization, format conversion, and ThumbHash generation. All images
    are served via our global CDN for an ideal user experience.'
  name: Images

{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "**Build a powerful video experience from on-demand streaming to dynamic social feeds with a single API.**\n\nRIXL handles video processing, ingestion and global delivery so you don't have to.\nWith builtin support for transcoding, storage and structured media feeds, Our API makes it easy to deliver high-quality media content at scale.",
        "title": "RIXL API",
        "contact": {
            "name": "RIXL Support",
            "url": "https://rixl.com/support",
            "email": "support@rixl.com"
        },
        "license": {
            "name": "All Rights Reserved",
            "url": "https://rixl.com/terms-of-service"
        },
        "version": "2.0"
    },
    "basePath": "/",
    "paths": {
        "/feeds/{feedId}": {
            "get": {
                "description": "Retrieve posts in a feed, with pagination.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feeds"
                ],
                "summary": "List posts in a feed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Feed ID",
                        "name": "feedId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 25,
                        "example": 25,
                        "description": "Maximum number of items to return in a single request. \u003cbr\u003e **Default:** `25`",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "example": 0,
                        "description": "Starting point of the result set. \u003cbr\u003eTo get page 2 with a limit of 25, set `offset` to `25`. \u003cbr\u003e **Default:** `0`",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pagination.PaginatedResponse-Post"
                        }
                    },
                    "400": {
                        "description": "Invalid feed ID or query parameters",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 2
            }
        },
        "/feeds/{feedId}/creators/{creatorId}": {
            "get": {
                "description": "Retrieve posts in a feed by a specific creator, with pagination.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feeds"
                ],
                "summary": "List posts by creator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Feed ID",
                        "name": "feedId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Creator ID",
                        "name": "creatorId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 25,
                        "example": 25,
                        "description": "Maximum number of items to return in a single request. \u003cbr\u003e **Default:** `25`",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "example": 0,
                        "description": "Starting point of the result set. \u003cbr\u003eTo get page 2 with a limit of 25, set `offset` to `25`. \u003cbr\u003e **Default:** `0`",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pagination.PaginatedResponse-Post"
                        }
                    },
                    "400": {
                        "description": "Invalid feed ID, creator ID, or query parameters",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 3
            }
        },
        "/feeds/{feedId}/upload/complete": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Mark a post upload as complete after successful file upload using API key authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feeds"
                ],
                "summary": "Upload: Mark as complete",
                "parameters": [
                    {
                        "description": "Post upload completion request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_posts.PostUploadCompleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Post"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to complete upload",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 5
            }
        },
        "/feeds/{feedId}/upload/init": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Initialize post creation and get presigned URLs for content upload using API key authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feeds"
                ],
                "summary": "Upload: Init",
                "parameters": [
                    {
                        "description": "Post upload initialization request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_posts.PostUploadInitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_posts.PostUploadInitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or parameters",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "Feed not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to initialize upload",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 4
            }
        },
        "/feeds/{feedId}/{postId}": {
            "get": {
                "description": "Retrieve a post from feed by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feeds"
                ],
                "summary": "Get a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Feed ID",
                        "name": "feedId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "postId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Post"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 1
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "delete a post by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feeds"
                ],
                "summary": "Delete a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Feed ID",
                        "name": "feedId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "postId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid project ID or query parameters",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 6
            }
        },
        "/images": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all images for a specific project, with pagination and sorting.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "List images for a project",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 25,
                        "example": 25,
                        "description": "Maximum number of items to return in a single request. \u003cbr\u003e **Default:** `25`",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "example": 0,
                        "description": "Starting point of the result set. \u003cbr\u003eTo get page 2 with a limit of 25, set `offset` to `25`. \u003cbr\u003e **Default:** `0`",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Field to sort by (created_at, name, size, updated_at)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc, desc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pagination.PaginatedResponse-Image"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 2
            }
        },
        "/images/upload/complete": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Complete the upload process and create the image record using API key authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Upload: Mark as complete",
                "parameters": [
                    {
                        "description": "Upload completion request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_images.UploadCompleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Image"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to complete upload or create image",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 4
            }
        },
        "/images/upload/init": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Initialize a presigned URL upload for an image file using API key authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Upload: Init",
                "parameters": [
                    {
                        "description": "Upload initialization request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_images.UploadInitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_images.UploadInitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to initialize upload",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 3
            }
        },
        "/images/{imageId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve an image by its ID for a specific project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Get image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image ID",
                        "name": "imageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Image"
                        }
                    },
                    "400": {
                        "description": "Invalid image ID",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "Image not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 1
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "delete an image by marking it as deleted",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Delete image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image ID",
                        "name": "imageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Image deleted successfully"
                    },
                    "400": {
                        "description": "Invalid project ID or image ID",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "Image not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to delete image",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 5
            }
        },
        "/videos": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all videos for a specific project, with pagination and sorting.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Videos"
                ],
                "summary": "List videos for a project",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 25,
                        "example": 25,
                        "description": "Maximum number of items to return in a single request. \u003cbr\u003e **Default:** `25`",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "example": 0,
                        "description": "Starting point of the result set. \u003cbr\u003eTo get page 2 with a limit of 25, set `offset` to `25`. \u003cbr\u003e **Default:** `0`",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Field to sort by (created_at, name, size, updated_at, duration)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc, desc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pagination.PaginatedResponse-Video"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 2
            }
        },
        "/videos/upload/complete": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Mark a video upload as complete after successful upload to storage using API key authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Videos"
                ],
                "summary": "Upload: Mark as complete",
                "parameters": [
                    {
                        "description": "Video upload completion request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_videos.UploadCompleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Video"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to complete upload",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 4
            }
        },
        "/videos/upload/init": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Initialize a video upload and get presigned URLs for video and poster using API key authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Videos"
                ],
                "summary": "Upload: Init",
                "parameters": [
                    {
                        "description": "Video upload initialization request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_videos.UploadInitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_videos.UploadInitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to initialize upload",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 3
            }
        },
        "/videos/{videoId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a video by its ID for a specific project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Videos"
                ],
                "summary": "Get a video",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Video ID",
                        "name": "videoId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Video"
                        }
                    },
                    "400": {
                        "description": "Invalid video ID",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "Video not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 1
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a video by its ID within a project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Videos"
                ],
                "summary": "Delete video",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Video ID",
                        "name": "videoId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid project ID or video ID",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "Video not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to delete video",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                },
                "x-order": 5
            }
        }
    },
    "definitions": {
        "File": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-01T00:00:00Z"
                },
                "format": {
                    "type": "string",
                    "example": "avif"
                },
                "id": {
                    "type": "string",
                    "example": "FpvLwyDMqu"
                },
                "name": {
                    "type": "string",
                    "example": "original.jpeg"
                },
                "project_id": {
                    "type": "string",
                    "example": "Bq4y3QB38S"
                },
                "size": {
                    "type": "integer",
                    "example": 1048576
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_qeeqez_api_db_sqlc.FileStatus"
                        }
                    ],
                    "example": "ready"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-01T00:00:00Z"
                },
                "url": {
                    "type": "string",
                    "example": "https://images.rixl.com/Bq4y3QB38S/FpvLwyDMqu"
                }
            }
        },
        "Image": {
            "type": "object",
            "properties": {
                "attached_to_video": {
                    "type": "boolean",
                    "example": false
                },
                "file": {
                    "$ref": "#/definitions/File"
                },
                "height": {
                    "type": "integer",
                    "example": 1080
                },
                "id": {
                    "type": "string",
                    "example": "PS5IMKoFLm"
                },
                "thumbhash": {
                    "type": "string",
                    "example": "1QcSHQRnh493V4dIh4eXh1h4kJUI"
                },
                "width": {
                    "type": "integer",
                    "example": 1920
                }
            }
        },
        "Post": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-01T00:00:00Z"
                },
                "creator_id": {
                    "type": "string",
                    "example": "CR8y3QB38S"
                },
                "description": {
                    "type": "string",
                    "example": "My awesome post"
                },
                "feed_id": {
                    "type": "string",
                    "example": "FD4y3QB38S"
                },
                "id": {
                    "type": "string",
                    "example": "PS5IMKoFLm"
                },
                "image": {
                    "$ref": "#/definitions/Image"
                },
                "type": {
                    "enum": [
                        "video",
                        "image"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_qeeqez_api_db_sqlc.PostType"
                        }
                    ],
                    "example": "video"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-01T00:00:00Z"
                },
                "video": {
                    "$ref": "#/definitions/Video"
                }
            }
        },
        "ResponseError": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code",
                    "type": "integer",
                    "example": 400
                },
                "details": {
                    "description": "Optional details about the error",
                    "type": "string",
                    "example": "The provided ID is not valid"
                },
                "error": {
                    "description": "Error message describing what went wrong",
                    "type": "string",
                    "example": "Invalid request"
                }
            }
        },
        "Video": {
            "type": "object",
            "properties": {
                "bitrate": {
                    "type": "integer"
                },
                "codec": {
                    "type": "string"
                },
                "duration": {
                    "type": "number"
                },
                "file": {
                    "$ref": "#/definitions/File"
                },
                "framerate": {
                    "type": "string"
                },
                "hdr": {
                    "type": "boolean"
                },
                "height": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "poster": {
                    "$ref": "#/definitions/Image"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "github_com_qeeqez_api_db_sqlc.FileStatus": {
            "type": "string",
            "enum": [
                "uploading",
                "uploaded",
                "processing",
                "ready",
                "error"
            ],
            "x-enum-varnames": [
                "FileStatusUploading",
                "FileStatusUploaded",
                "FileStatusProcessing",
                "FileStatusReady",
                "FileStatusError"
            ]
        },
        "github_com_qeeqez_api_db_sqlc.PostType": {
            "type": "string",
            "enum": [
                "image",
                "video"
            ],
            "x-enum-varnames": [
                "PostTypeImage",
                "PostTypeVideo"
            ]
        },
        "github_com_qeeqez_api_db_sqlc.VideoQuality": {
            "type": "string",
            "enum": [
                "basic",
                "shorts",
                "pro"
            ],
            "x-enum-varnames": [
                "VideoQualityBasic",
                "VideoQualityShorts",
                "VideoQualityPro"
            ]
        },
        "internal_images.UploadCompleteRequest": {
            "type": "object",
            "properties": {
                "attached_to_video": {
                    "type": "boolean",
                    "example": false
                },
                "image_id": {
                    "type": "string",
                    "example": "PS5IMKoFLm"
                }
            }
        },
        "internal_images.UploadInitRequest": {
            "type": "object",
            "properties": {
                "format": {
                    "type": "string",
                    "example": "jpg"
                },
                "name": {
                    "type": "string",
                    "example": "my-image.jpg"
                }
            }
        },
        "internal_images.UploadInitResponse": {
            "type": "object",
            "properties": {
                "image_id": {
                    "type": "string",
                    "example": "PS5IMKoFLm"
                },
                "presigned_url": {
                    "type": "string",
                    "example": "https://images.rixl.com/Bq4y3QB38S/PS5IMKoFLm?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAEXAMPLE%2F20250831%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20250831T103000Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b228dbec8c1008c80c162e1210e4503dceead1e4d4751b4d9787314fd6da4d55"
                },
                "upload_expires": {
                    "type": "integer",
                    "example": 1640995200
                }
            }
        },
        "internal_posts.PostUploadCompleteRequest": {
            "type": "object",
            "required": [
                "post_id"
            ],
            "properties": {
                "post_id": {
                    "type": "string",
                    "example": "PS5IMKoFLm"
                }
            }
        },
        "internal_posts.PostUploadInitRequest": {
            "type": "object",
            "required": [
                "content_type",
                "file_name",
                "format"
            ],
            "properties": {
                "content_type": {
                    "type": "string",
                    "enum": [
                        "image",
                        "video"
                    ],
                    "example": "video"
                },
                "creator_id": {
                    "type": "string",
                    "example": "CR8y3QB38S"
                },
                "description": {
                    "type": "string",
                    "example": "My awesome post"
                },
                "file_name": {
                    "type": "string",
                    "example": "my-video.mp4"
                },
                "format": {
                    "type": "string",
                    "example": "mp4"
                },
                "image_format": {
                    "type": "string",
                    "example": "jpg"
                },
                "video_quality": {
                    "enum": [
                        "basic",
                        "shorts",
                        "pro"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_qeeqez_api_db_sqlc.VideoQuality"
                        }
                    ],
                    "example": "shorts"
                }
            }
        },
        "internal_posts.PostUploadInitResponse": {
            "type": "object",
            "properties": {
                "content_id": {
                    "type": "string",
                    "example": "VI9VXQxWXQ"
                },
                "content_presigned_url": {
                    "type": "string",
                    "example": "https://videos.rixl.com/Bq4y3QB38S/VI9VXQxWXQ?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAEXAMPLE%2F20250831%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20250831T103000Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b228dbec8c1008c80c162e1210e4503dceead1e4d4751b4d9787314fd6da4d55"
                },
                "post_id": {
                    "type": "string",
                    "example": "PS5IMKoFLm"
                },
                "poster_id": {
                    "type": "string",
                    "example": "IM8y3QB38S"
                },
                "poster_presigned_url": {
                    "type": "string",
                    "example": "https://images.rixl.com/Bq4y3QB38S/IM8y3QB38S?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAEXAMPLE%2F20250831%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20250831T103000Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b228dbec8c1008c80c162e1210e4503dceead1e4d4751b4d9787314fd6da4d55"
                },
                "upload_expires": {
                    "type": "integer",
                    "example": 1640995200
                }
            }
        },
        "internal_videos.UploadCompleteRequest": {
            "type": "object",
            "properties": {
                "video_id": {
                    "type": "string"
                }
            }
        },
        "internal_videos.UploadInitRequest": {
            "type": "object",
            "properties": {
                "file_name": {
                    "type": "string",
                    "example": "my-video.mp4"
                },
                "image_format": {
                    "type": "string",
                    "example": "jpg"
                },
                "video_quality": {
                    "enum": [
                        "basic",
                        "shorts",
                        "pro"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_qeeqez_api_db_sqlc.VideoQuality"
                        }
                    ],
                    "example": "shorts"
                }
            }
        },
        "internal_videos.UploadInitResponse": {
            "type": "object",
            "properties": {
                "poster_id": {
                    "type": "string",
                    "example": "PS5IMKoFLm"
                },
                "poster_presigned_url": {
                    "type": "string",
                    "example": "https://images.rixl.com/Bq4y3QB38S/PS5IMKoFLm?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAEXAMPLE%2F20250831%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20250831T103000Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b228dbec8c1008c80c162e1210e4503dceead1e4d4751b4d9787314fd6da4d55"
                },
                "upload_expires": {
                    "type": "integer",
                    "example": 1640995200
                },
                "video_id": {
                    "type": "string",
                    "example": "VI9VXQxWXQ"
                },
                "video_presigned_url": {
                    "type": "string",
                    "example": "https://videos.rixl.com/Bq4y3QB38S/VI9VXQxWXQ?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAEXAMPLE%2F20250831%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20250831T103000Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b228dbec8c1008c80c162e1210e4503dceead1e4d4751b4d9787314fd6da4d55"
                }
            }
        },
        "pagination.PaginatedResponse-Image": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data contains the slice of items for the current request.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Image"
                    }
                },
                "pagination": {
                    "description": "Pagination data for the request.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/pagination.Pagination"
                        }
                    ]
                }
            }
        },
        "pagination.PaginatedResponse-Post": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data contains the slice of items for the current request.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Post"
                    }
                },
                "pagination": {
                    "description": "Pagination data for the request.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/pagination.Pagination"
                        }
                    ]
                }
            }
        },
        "pagination.PaginatedResponse-Video": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data contains the slice of items for the current request.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Video"
                    }
                },
                "pagination": {
                    "description": "Pagination data for the request.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/pagination.Pagination"
                        }
                    ]
                }
            }
        },
        "pagination.Pagination": {
            "type": "object",
            "properties": {
                "limit": {
                    "description": "Maximum number of items to return in a single request.",
                    "type": "integer",
                    "default": 25,
                    "maximum": 100,
                    "minimum": 1,
                    "example": 100
                },
                "offset": {
                    "description": "Starting point of the result set.",
                    "type": "integer",
                    "default": 0,
                    "minimum": 0,
                    "example": 50
                },
                "total": {
                    "description": "The total number of available items in the full list.",
                    "type": "integer",
                    "minimum": 0,
                    "example": 1000
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Internal API key for service-to-service communication.",
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        },
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "**Build dynamic social experiences.**\u003cbr\u003e\u003cbr\u003eFeeds are ordered collections of Posts, designed for creating vertical video carousels, stories, or social timelines. Each Post contains your media (video or image) and its associated metadata.",
            "name": "Feeds"
        },
        {
            "description": "**Upload once, stream perfectly anywhere.**\u003cbr\u003e\u003cbr\u003eRIXL's intelligent processing pipeline analyzes your video and transcodes it for optimal quality and performance. We handle the complexity so you can deliver a perfect playback experience every time.",
            "name": "Videos"
        },
        {
            "description": "**Deliver fast, perfectly formatted images.**\u003cbr\u003e\u003cbr\u003eRIXL automatically handles image optimization, format conversion, and ThumbHash generation. All images are served via our global CDN for an ideal user experience.",
            "name": "Images"
        }
    ]
}